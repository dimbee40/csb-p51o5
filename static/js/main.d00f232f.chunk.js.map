{"version":3,"sources":["WeatherSearch.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherSearch","useState","city","setCity","temperature","setTemperature","wind","setWind","icon","setIcon","humidity","setHumidity","description","setDescription","handleResponse","response","console","log","Math","round","data","main","temp","weather","speed","iconURL","src","alt","className","onSubmit","event","preventDefault","url","axios","get","then","type","placeholder","onChange","target","value","href","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAGe,SAASA,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KACA,EAAgCR,mBAAS,IAAzC,mBAAOS,EAAP,KAAiBC,EAAjB,KACA,EAAsCV,mBAAS,IAA/C,mBAAOW,EAAP,KAAoBC,EAApB,KAEA,SAASC,EAAeC,GACtBC,QAAQC,IAAIF,GACZV,EACE,yDAC0BH,EAD1B,OACoCgB,KAAKC,MAAMJ,EAASK,KAAKC,KAAKC,MAAO,IADzE,YAKFT,EACE,+CAAkBE,EAASK,KAAKG,QAAQ,GAAGX,gBAE7CL,EAAQ,6CAAgBQ,EAASK,KAAKd,KAAKkB,MAAnC,YACRb,EAAY,2CAAcO,KAAKC,MAAMJ,EAASK,KAAKC,KAAKX,UAA5C,QACZ,IAAIe,EAAO,2CAAuCV,EAASK,KAAKG,QAAQ,GAAGf,KAAhE,WAEXC,EACE,+BACG,IACD,qBAAKiB,IAAKD,EAASE,IAAKf,IAAgB,QAiB9C,OACE,sBAAKgB,UAAU,gBAAf,UACE,uBAAMC,SAdV,SAAsBC,GACpBA,EAAMC,iBACN,IACIC,EAAG,4DAAwD9B,EAAxD,kBADG,mCACH,iBACP+B,IAAMC,IAAIF,GAAKG,KAAKrB,IAUlB,UACE,uBAAOsB,KAAK,SAASC,YAAY,cAAcC,SARrD,SAAoBR,GAClB3B,EAAQ2B,EAAMS,OAAOC,OACrBxB,QAAQC,IAAIf,MAOR,uBAAOkC,KAAK,SAASI,MAAM,cAE7B,4BAAIpC,IACJ,4BAAIE,IACJ,4BAAII,IACJ,4BAAIE,IACJ,4BAAIJ,IACJ,0CACW,mBAAGiC,KAAK,wCAAR,uBCvDF,SAASC,IACtB,OACE,sBAAKd,UAAU,MAAf,UACE,mDACA,cAAC5B,EAAD,OCPN,IAYe2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d00f232f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function WeatherSearch() {\n  const [city, setCity] = useState(\"\");\n  const [temperature, setTemperature] = useState(\"\");\n  const [wind, setWind] = useState(\"\");\n  const [icon, setIcon] = useState(\"\");\n  const [humidity, setHumidity] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  function handleResponse(response) {\n    console.log(response);\n    setTemperature(\n      <li>\n        Current temperature in {city} is {Math.round(response.data.main.temp)}{\" \"}\n        Â°C\n      </li>\n    );\n    setDescription(\n      <li>Description: {response.data.weather[0].description}</li>\n    );\n    setWind(<li>Windspeed: {response.data.wind.speed} km/h</li>);\n    setHumidity(<li>Humidity:{Math.round(response.data.main.humidity)}%</li>);\n    let iconURL = `http://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`;\n\n    setIcon(\n      <li>\n        {\" \"}\n        <img src={iconURL} alt={description} />{\" \"}\n      </li>\n    );\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    let api = \"3ec119a7b4622feedeeba843b106eb0a\";\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${api}&units=metric`;\n    axios.get(url).then(handleResponse);\n  }\n\n  function changeCity(event) {\n    setCity(event.target.value);\n    console.log(city);\n  }\n\n  return (\n    <div className=\"WeatherSearch\">\n      <form onSubmit={handleSubmit}>\n        <input type=\"search\" placeholder=\"Type a word\" onChange={changeCity} />\n        <input type=\"submit\" value=\"Search\" />\n      </form>\n      <p>{temperature}</p>\n      <p>{wind}</p>\n      <p>{humidity}</p>\n      <p>{description}</p>\n      <p>{icon}</p>\n      <p>\n        Coded by <a href=\"https://github.com/dimbee40/test-repo\">Deb</a>\n      </p>\n    </div>\n  );\n}\n","import \"./App.css\";\nimport WeatherSearch from \"./WeatherSearch\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Dictionary Search</h1>\n      <WeatherSearch />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}